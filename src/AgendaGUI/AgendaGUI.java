package AgendaGUI;

import AgendaContacte.DataAccess.AgendaDatabaseConnection;
import AgendaContacte.DataAccess.AgendaObject;
import AgendaContacte.DataAccess.IAgendaLogic;
import AgendaContacte.ExtensionMethods.AgendaFilter;
import AgendaContacte.Enums.CriteriuOrdonare;
import AgendaContacte.ExtensionMethods.AgendaIO;
import AgendaContacte.Models.*;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.TimerTask;
import java.util.Timer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class AgendaGUI extends javax.swing.JFrame {

    protected IAgendaLogic agenda;
    protected List<Contact> contacte;
    private DefaultListModel modelAgenda;
    private int objectContactID;
    private int databaseContactID;
    private javax.swing.Timer timerBanner;
    private File caleFisierSalvat;
    private static File caleSalvare;

    public AgendaGUI() {

        initComponents();
        setIcon();
        modelAgenda = new DefaultListModel();
        contacte = new ArrayList<>();
        this.deschidereJMenu.setEnabled(false);
        this.salveazaFisierJMenu.setEnabled(false);
        this.adaugaContactJButton.setEnabled(false);
        this.stergeContactJButton.setEnabled(false);
        this.editeazaContactJButton.setEnabled(false);
        this.ordoneazaJButton.setEnabled(false);
        this.filtreazaJButton.setEnabled(false);
        ruleazaReclame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reclameJLabel = new javax.swing.JLabel();
        ordonareJLabel = new javax.swing.JLabel();
        filtrareJLabel = new javax.swing.JLabel();
        filtreJComboBox = new javax.swing.JComboBox<>();
        ordonareJComboBox = new javax.swing.JComboBox<>();
        filtruJLabel = new javax.swing.JLabel();
        filtruJTextField = new javax.swing.JTextField();
        filtreazaJButton = new javax.swing.JButton();
        ordoneazaJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        agendaJList = new javax.swing.JList<>();
        adaugaContactJButton = new javax.swing.JButton();
        stergeContactJButton = new javax.swing.JButton();
        editeazaContactJButton = new javax.swing.JButton();
        baraMenuBar = new javax.swing.JMenuBar();
        fisiereJMenu = new javax.swing.JMenu();
        deschidereJMenu = new javax.swing.JMenu();
        obiecteJMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        DBJMenu = new javax.swing.JMenu();
        deschideConexiuneDBJMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        deserializeContactsJMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        salveazaFisierJMenu = new javax.swing.JMenu();
        salvareMenuItem = new javax.swing.JMenuItem();
        ajutorJMenu = new javax.swing.JMenu();
        inregistrareJMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        despreJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Agenda AR");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(new java.awt.Color(255, 255, 255));

        reclameJLabel.setBackground(new java.awt.Color(255, 51, 0));
        reclameJLabel.setFont(new java.awt.Font("Calibri Light", 1, 48)); // NOI18N
        reclameJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        reclameJLabel.setText("Reclama ta aici.");
        reclameJLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        ordonareJLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        ordonareJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AgendaGUI/icoImages/cube-of-notes-stack_icon-png_Type.png"))); // NOI18N
        ordonareJLabel.setText(" Ordonare: ");

        filtrareJLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        filtrareJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AgendaGUI/icoImages/filter_icon-png_Type.png"))); // NOI18N
        filtrareJLabel.setText("Filtrare: ");

        filtreJComboBox.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        filtreJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Numere fixe", "Numere mobile", "Nascuti astazi", "Nascuti luna curenta", "Personalizata (dupa filtru)", "Toate contactele" }));

        ordonareJComboBox.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        ordonareJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dupa Nume", "Dupa Prenume" }));

        filtruJLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        filtruJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AgendaGUI/icoImages/carafe-with-filter-coffee_icon-png_Type.png"))); // NOI18N
        filtruJLabel.setText("Filtru:");

        filtruJTextField.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N

        filtreazaJButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        filtreazaJButton.setText("Filtreaza");
        filtreazaJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtreazaJButtonActionPerformed(evt);
            }
        });

        ordoneazaJButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        ordoneazaJButton.setText("Ordoneaza");
        ordoneazaJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordoneazaJButtonActionPerformed(evt);
            }
        });

        agendaJList.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(agendaJList);

        adaugaContactJButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        adaugaContactJButton.setText("Adauga Contact");
        adaugaContactJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adaugaContactJButtonActionPerformed(evt);
            }
        });

        stergeContactJButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        stergeContactJButton.setText("Sterge contact selectat");
        stergeContactJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stergeContactJButtonActionPerformed(evt);
            }
        });

        editeazaContactJButton.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        editeazaContactJButton.setText("Editeaza contact selectat");
        editeazaContactJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editeazaContactJButtonActionPerformed(evt);
            }
        });

        baraMenuBar.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N

        fisiereJMenu.setText("Fisiere");
        fisiereJMenu.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        fisiereJMenu.setRolloverEnabled(false);

        deschidereJMenu.setText("Deschide");
        deschidereJMenu.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N

        obiecteJMenuItem.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        obiecteJMenuItem.setText("Obiecte");
        obiecteJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                obiecteJMenuItemActionPerformed(evt);
            }
        });
        deschidereJMenu.add(obiecteJMenuItem);

        jSeparator2.setForeground(new java.awt.Color(51, 51, 255));
        deschidereJMenu.add(jSeparator2);

        DBJMenu.setText("Baza de Date");
        DBJMenu.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N

        deschideConexiuneDBJMenuItem.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        deschideConexiuneDBJMenuItem.setText("Deschide DB");
        deschideConexiuneDBJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deschideConexiuneDBJMenuItemActionPerformed(evt);
            }
        });
        DBJMenu.add(deschideConexiuneDBJMenuItem);

        deschidereJMenu.add(DBJMenu);

        jSeparator4.setForeground(new java.awt.Color(51, 51, 255));
        deschidereJMenu.add(jSeparator4);

        deserializeContactsJMenuItem.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        deserializeContactsJMenuItem.setText("Deschide Agenda existenta");
        deserializeContactsJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deserializeContactsJMenuItemActionPerformed(evt);
            }
        });
        deschidereJMenu.add(deserializeContactsJMenuItem);

        fisiereJMenu.add(deschidereJMenu);

        jSeparator3.setForeground(new java.awt.Color(51, 51, 255));
        fisiereJMenu.add(jSeparator3);

        salveazaFisierJMenu.setText("Salveaza fisier");
        salveazaFisierJMenu.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N

        salvareMenuItem.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        salvareMenuItem.setText("Salveaza");
        salvareMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvareMenuItemActionPerformed(evt);
            }
        });
        salveazaFisierJMenu.add(salvareMenuItem);

        fisiereJMenu.add(salveazaFisierJMenu);

        baraMenuBar.add(fisiereJMenu);
        fisiereJMenu.getAccessibleContext().setAccessibleName("");

        ajutorJMenu.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        ajutorJMenu.setLabel("Ajutor");

        inregistrareJMenuItem.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        inregistrareJMenuItem.setText("Inregistrare");
        inregistrareJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inregistrareJMenuItemActionPerformed(evt);
            }
        });
        ajutorJMenu.add(inregistrareJMenuItem);

        jSeparator1.setForeground(new java.awt.Color(51, 51, 255));
        ajutorJMenu.add(jSeparator1);

        despreJMenuItem.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        despreJMenuItem.setText("Despre");
        despreJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                despreJMenuItemActionPerformed(evt);
            }
        });
        ajutorJMenu.add(despreJMenuItem);

        baraMenuBar.add(ajutorJMenu);

        setJMenuBar(baraMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(adaugaContactJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(39, 39, 39)
                .addComponent(stergeContactJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(43, 43, 43)
                .addComponent(editeazaContactJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(58, 58, 58))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filtrareJLabel)
                                .addGap(30, 30, 30)
                                .addComponent(filtreJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(filtruJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(filtruJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ordonareJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ordonareJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filtreazaJButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ordoneazaJButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(34, 34, 34))
            .addComponent(reclameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 862, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(reclameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(filtrareJLabel)
                    .addComponent(filtreJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filtruJLabel)
                        .addComponent(filtruJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(filtreazaJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ordonareJLabel)
                        .addComponent(ordonareJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ordoneazaJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(adaugaContactJButton)
                    .addComponent(stergeContactJButton)
                    .addComponent(editeazaContactJButton))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void obiecteJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_obiecteJMenuItemActionPerformed

//ne generam lista de contracte parte din obiectele de tip AgendaObject();
        agenda = new AgendaObject();
        generateAgendaObject();
        verificaSarbatoriti();
    }//GEN-LAST:event_obiecteJMenuItemActionPerformed

    private void stergeContactJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stergeContactJButtonActionPerformed

        if (agenda != null) {

            objectContactID = this.agendaJList.getSelectedIndex();
            if (objectContactID >= 0) {

                Contact selectedContact = contacte.get(objectContactID);
                databaseContactID = selectedContact.getContactId();

                int clickOption = JOptionPane.showConfirmDialog(this, "Sunteti sigur ca doriti stergerea contactului selectat?",
                        "Stergere contact", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                switch (clickOption) {
                    case -1:
                        JOptionPane.showMessageDialog(this, "Nu a fost selectat niciun contact pentru stergere."
                                + "\nMai incercati.", "Contact inexistent", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    case 0:
                        if (agenda.getClass() == AgendaObject.class) {
                            agenda.stergeContact(objectContactID, 0);
                            updateAgendaModel();

                        } else if (agenda.getClass() == AgendaDatabaseConnection.class) {
                            agenda.stergeContact(objectContactID, databaseContactID);
                            updateAgendaModel();
                        } else {
                            System.out.println("Eroare la nivel de stergere - nu s-a identificat tipul obiectului.");
                        }
                        break;
                    case 1:
                        updateAgendaModel();
                        break;
                }
            } else {
                JOptionPane.showMessageDialog(this, "Nu a fost selectat niciun contact pentru stergere."
                        + "\nMai incercati.", "Contact inexistent", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Lista de contacte este invalida.\n"
                    + "Incarcati lista de contacte.", "Lista inexistenta", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_stergeContactJButtonActionPerformed

    private void adaugaContactJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adaugaContactJButtonActionPerformed

        if (agenda != null) {
            AdaugaContactGUI addContact = new AdaugaContactGUI(this);
            addContact.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Nu a fost incarcata agenda."
                    + "\nMai incercati.", "Agenda inexistenta", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_adaugaContactJButtonActionPerformed

    private void editeazaContactJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editeazaContactJButtonActionPerformed
        objectContactID = this.agendaJList.getSelectedIndex();
        if (agenda != null) {

            if (objectContactID >= 0) {
                Contact deModificat = contacte.get(objectContactID);

                ModificaContactGUI modifica = new ModificaContactGUI(this, deModificat, objectContactID);
                modifica.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Nu a fost selectat niciun contact.\n"
                        + "Mai incercati...", "Contact neselectat", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Lista de contacte este invalida.\n"
                    + "Incarcati lista de contacte.", "Lista inexistenta", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_editeazaContactJButtonActionPerformed

    private void ordoneazaJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordoneazaJButtonActionPerformed

        if (agenda != null) {
            int tipOrdonare = this.ordonareJComboBox.getSelectedIndex();
            switch (tipOrdonare) {
                case 0:
                    //  contacte = agenda.ordoneazaContacte(contacte, CriteriuOrdonare.DUPA_NUME);
                    contacte = AgendaFilter.ordoneazaContacte(contacte, CriteriuOrdonare.DUPA_NUME);
                    refreshAgendaModel();
                    break;
                case 1:
                    //   contacte = agenda.ordoneazaContacte(contacte, CriteriuOrdonare.DUPA_PRENUME);
                    contacte = AgendaFilter.ordoneazaContacte(contacte, CriteriuOrdonare.DUPA_PRENUME);
                    refreshAgendaModel();
                    break;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Lista de contacte este invalida.\n"
                    + "Incarcati lista de contacte.", "Lista inexistenta", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_ordoneazaJButtonActionPerformed

    private void filtreazaJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtreazaJButtonActionPerformed

        if (agenda != null) {
            int tipFiltru = this.filtreJComboBox.getSelectedIndex();

            switch (tipFiltru) {

                case 0:
                    updateAgendaModel();
                    contacte = AgendaFilter.filtreazaNrFix(contacte);
                    refreshAgendaModel();
                    break;

                case 1:
                    updateAgendaModel();
                    contacte = AgendaFilter.filtreazaNrMobil(contacte);
                    refreshAgendaModel();
                    break;

                case 2:
                    updateAgendaModel();
                    contacte = AgendaFilter.filtreazaNascutiAstazi(contacte);
                    refreshAgendaModel();
                    break;

                case 3:
                    updateAgendaModel();
                    contacte = AgendaFilter.filtreazaNascutiLunaCurenta(contacte);
                    refreshAgendaModel();
                    break;

                case 4:
                    updateAgendaModel();
                    contacte = AgendaFilter.filtreazaPersonalizat(contacte, this.filtruJTextField.getText());
                    refreshAgendaModel();
                    break;

                case 5:
                    updateAgendaModel();
                    break;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Lista de contacte este invalida.\n"
                    + "Incarcati lista de contacte.", "Lista inexistenta", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_filtreazaJButtonActionPerformed

    private void deschideConexiuneDBJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deschideConexiuneDBJMenuItemActionPerformed
        agenda = new AgendaDatabaseConnection();
        generateAgendaDatabase();
        verificaSarbatoriti();
    }//GEN-LAST:event_deschideConexiuneDBJMenuItemActionPerformed

    private void despreJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_despreJMenuItemActionPerformed
        DespreGUI despreDisplay = new DespreGUI();
        despreDisplay.setVisible(true);
    }//GEN-LAST:event_despreJMenuItemActionPerformed

    private void inregistrareJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inregistrareJMenuItemActionPerformed

        String parolaAcces = "andreiroca";//parola hardcodata de acces catre agenda principala
        String input = JOptionPane.showInputDialog("Introduceti parola: ");
        if (input != null) {
            if (input.equals(parolaAcces)) {
                this.deschidereJMenu.setEnabled(true);
                this.salveazaFisierJMenu.setEnabled(true);
                this.adaugaContactJButton.setEnabled(true);
                this.stergeContactJButton.setEnabled(true);
                this.editeazaContactJButton.setEnabled(true);
                this.ordoneazaJButton.setEnabled(true);
                this.filtreazaJButton.setEnabled(true);
                this.inregistrareJMenuItem.setEnabled(false);
                JOptionPane.showMessageDialog(this, "Bine ai venit, Andrei!", "Bine ai venit!", JOptionPane.INFORMATION_MESSAGE);

                timerBanner.stop();
                this.reclameJLabel.setText("Bine ai venit, Andrei!");
                this.reclameJLabel.setIcon(null);
            } else {
                JOptionPane.showMessageDialog(this, "Parola nu este corecta."
                        + "Mai incercati.", "Parola incorecta", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_inregistrareJMenuItemActionPerformed

    private void salvareMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvareMenuItemActionPerformed

        JFileChooser ch = new JFileChooser();
        ch.showSaveDialog(this);
        caleSalvare = ch.getSelectedFile();

        salvareAutomata();
        JOptionPane.showMessageDialog(this, "Contactele au fost salvate in fisier!", "Contacte salvate!", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_salvareMenuItemActionPerformed

    private void deserializeContactsJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deserializeContactsJMenuItemActionPerformed

        JFileChooser ch = new JFileChooser();
        int selectedVal = ch.showOpenDialog(this);
        caleFisierSalvat = ch.getSelectedFile();
        if (selectedVal == ch.OPEN_DIALOG) {
            List<Contact> deserializedContacts = AgendaIO.openContactsFile(caleFisierSalvat);
            this.contacte = deserializedContacts;
        } else {
            System.out.println("You have canceld the selection.");
        }

        //pentru a evita NullPointerException si pentru a putea avea acces la lista de contacte aceasta trebuie activata.
        //Solutia implementata este ca agenda sa fie de tip AgendaObject.
        if (agenda == null) {
            this.agenda = new AgendaObject();
            this.agenda.setAllContacts(contacte);
            refreshAgendaModel();
        } else {
            this.agenda.setAllContacts(contacte);
            refreshAgendaModel();
        }
    }//GEN-LAST:event_deserializeContactsJMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Metal look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgendaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        try {
            //afisarea mesajului de intampinare pentru 2 secunde.
            SplashScreenGUI mesajIntampinare = new SplashScreenGUI();
            mesajIntampinare.setVisible(true);
            Thread.sleep(2000);
            mesajIntampinare.setVisible(false);

            //pornirea aplicatiei in sine
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    new AgendaGUI().setVisible(true);
                }
            });
        } catch (InterruptedException ex) {
            System.out.println(ex.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu DBJMenu;
    private javax.swing.JButton adaugaContactJButton;
    private javax.swing.JList<String> agendaJList;
    private javax.swing.JMenu ajutorJMenu;
    private javax.swing.JMenuBar baraMenuBar;
    private javax.swing.JMenuItem deschideConexiuneDBJMenuItem;
    private javax.swing.JMenu deschidereJMenu;
    private javax.swing.JMenuItem deserializeContactsJMenuItem;
    private javax.swing.JMenuItem despreJMenuItem;
    private javax.swing.JButton editeazaContactJButton;
    private javax.swing.JLabel filtrareJLabel;
    private javax.swing.JComboBox<String> filtreJComboBox;
    private javax.swing.JButton filtreazaJButton;
    private javax.swing.JLabel filtruJLabel;
    private javax.swing.JTextField filtruJTextField;
    private javax.swing.JMenu fisiereJMenu;
    private javax.swing.JMenuItem inregistrareJMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JMenuItem obiecteJMenuItem;
    private javax.swing.JComboBox<String> ordonareJComboBox;
    private javax.swing.JLabel ordonareJLabel;
    private javax.swing.JButton ordoneazaJButton;
    private javax.swing.JLabel reclameJLabel;
    private javax.swing.JMenuItem salvareMenuItem;
    private javax.swing.JMenu salveazaFisierJMenu;
    private javax.swing.JButton stergeContactJButton;
    // End of variables declaration//GEN-END:variables

    //salveaza obiectele in agenda serializata cu o recurenta la 1 minut
    private void salvareAutomata() {
        TimerTask taskSalvare = new TimerTask() {
            @Override
            public void run() {
                AgendaIO.saveToFile(contacte, caleSalvare);
            }
        };
        if (caleSalvare != null) {
            Timer timpSalvare = new Timer();
            timpSalvare.schedule(taskSalvare, 0, 100000);
        }
    }

    //programele ruleaza pe ecran pana oprim rularea
    private void ruleazaReclame() {

        File calePoze = new File("C:\\Andrei stuff\\Curs Java InfoAcademy\\Proiect Final Java Andrei R\\ProiectFinalJavaAR\\src\\AgendaGUI\\icoImages");
        File[] pozeBanner = calePoze.listFiles(f -> f.getName().startsWith("final"));
        final List<File> listaPoze = Arrays.asList(pozeBanner);

        ActionListener task = new ActionListener() {
            int pozaCurenta = 0;

            @Override
            public void actionPerformed(ActionEvent e) {
                File f = listaPoze.get(pozaCurenta);
                ImageIcon poza = new ImageIcon(f.getAbsolutePath());
                reclameJLabel.setIcon(poza);
                reclameJLabel.setText("");
                pozaCurenta++;
                if (pozaCurenta == listaPoze.size()) {
                    pozaCurenta = 0;
                }
            }
        };

        timerBanner = new javax.swing.Timer(3000, task);
        timerBanner.start();
    }

    //verifica daca avem sarbatoriti in lista de contacte nascuti in ziua si luna curenta
    private void verificaSarbatoriti() {
        DefaultListModel modelSarbatoriti = new DefaultListModel();

        contacte.stream().filter((contact) -> (contact.getContactPersoana().getDataNasterii().getDayOfMonth() == LocalDate.now().getDayOfMonth()
                && contact.getContactPersoana().getDataNasterii().getMonthValue() == LocalDate.now().getMonthValue())).forEachOrdered((contact) -> {
            modelSarbatoriti.addElement(contact.getContactPersoana().getFullName(CriteriuOrdonare.DUPA_NUME));
        });
        if (!modelSarbatoriti.isEmpty()) {
            NascutiAziGUI sarbatoriti = new NascutiAziGUI(modelSarbatoriti);
            sarbatoriti.setVisible(true);
        }
    }

    //Refresh pe agenda - util in cazul actiunilor de tip filtru, ordonare sau serializare
    public void refreshAgendaModel() {
        modelAgenda.clear();
        for (Contact cont : contacte) {
            modelAgenda.addElement((cont.getContactPersoana() + " " + cont.getNumarTelefon().toString()));
        }
        this.agendaJList.setModel(modelAgenda);
    }

    //Metoda ce ne va genera contactele din clasa AgendaObject lista generata mai mult in stagiul de test, cea cu obiectele
    private void generateAgendaObject() {
        ((AgendaObject) agenda).objectAllContacts();
        updateAgendaModel();
    }

    //Metoda ce ne va genera contactele din clasa AgendaDataBaseConnection, cea legata de baza  de date
    private void generateAgendaDatabase() {
        ((AgendaDatabaseConnection) agenda).dbAllContacts();
        updateAgendaModel();
    }

    //Actualizarea Agendei dupa fiecare actiune asupra listei de contacte.
    public void updateAgendaModel() {

        modelAgenda.clear();
        contacte = agenda.getAllContacts();
        for (Contact cont : contacte) {
            modelAgenda.addElement((cont.getContactPersoana() + " " + cont.getNumarTelefon().toString()));
        }
        this.agendaJList.setModel(modelAgenda);
    }

//Metoda ce ne seteaza imaginea iconitei form-ului principal.
    private void setIcon() {
        String iconPath = "C:\\Andrei stuff\\Curs Java InfoAcademy\\Proiect Final Java Andrei R\\ProiectFinalJavaAR\\src\\AgendaGUI\\icoImages\\agenda_icon_png_Type.png";
        setIconImage(Toolkit.getDefaultToolkit().getImage(iconPath));
    }
}
